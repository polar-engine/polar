@uniform vec2 u_resolution
@uniform mat4 u_view
@uniform mat4 u_projection
@uniform mat4 u_invViewProj
@uniform uint u_time

@uniform float u_baseDetail
@uniform float u_farFocus
@uniform float u_farLimiter
@uniform float u_pixelFactor
@uniform float u_voxelFactor

@uniform float u_baseThreshold
@uniform float u_beatTicks
@uniform float u_beatPower
@uniform float u_beatStrength
@uniform float u_waveTicks
@uniform float u_wavePower
@uniform float u_waveStrength
@uniform vec3  u_worldScale
@uniform vec3  u_color

@attrib vec2 a_vertex

@varying smooth vec2 v_vertex

@gin position u_posBuffer
@gin normal u_normalBuffer
@gin depth u_depthBuffer

@out rgba8 color o_color

@shader vertex

void main() {
	gl_Position = vec4(a_vertex, 0.0, 1.0);
	v_vertex = a_vertex;
}

@shader fragment

float InverseDepth(in float linear) {
	float f = 48.0;
	float n = 0.1;
	float z = (f + n - 2 * n / linear) / (f - n);
	return z;
}

float Depth(in vec2 texCoord) {
	float f = 48.0;
	float n = 0.1;
	float z = (2 * n) / (f + n - texture(u_depthBuffer, texCoord).r * (f - n));
	return z;
}

vec3 mod289(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
	return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r) {
	return 1.79284291400159 - 0.85373472095314 * r;
}


/***** snoise function *****
*
* Copyright (C) 2011 by Ashima Arts (Simplex noise)
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*****/
float snoise(vec3 v) { 
	const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
	const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

	// First corner
	vec3 i  = floor(v + dot(v, C.yyy) );
	vec3 x0 =   v - i + dot(i, C.xxx) ;

	// Other corners
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	vec3 x1 = x0 - i1 + C.xxx;
	vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

	// Permutations
	i = mod289(i); 
	vec4 p = permute( permute( permute( 
	i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
	+ i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
	+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	vec3  ns = n_ * D.wyz - D.xzx;

	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

	vec4 x = x_ *ns.x + ns.yyyy;
	vec4 y = y_ *ns.x + ns.yyyy;
	vec4 h = 1.0 - abs(x) - abs(y);

	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));

	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);

	//Normalise gradients
	vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
	m = m * m;
	return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
	dot(p2,x2), dot(p3,x3) ) );
}

float Threshold() {
	float s = sin(float(u_time) / u_beatTicks);
	float f = 1.0 - pow(abs(s), 1.0 / u_beatPower);
	return u_baseThreshold + f * u_beatStrength;
}

#define PI_2 (3.14159 * 2.0)

float Threshold2(in float z) {
	float s = sin(z * PI_2 - float(u_time) / u_waveTicks) - 0.9;
	float f = 1.0 - pow(abs(s), 1.0 / u_wavePower);
	return f * u_waveStrength;
}

bool Eval(in vec3 coord, in float z, out float result) {
	vec3 finalCoord = coord / u_worldScale;

	if(u_voxelFactor > 1) {
		float factor2 = max(u_resolution.x, u_resolution.y) / pow(u_voxelFactor + 1, 1.5);
		finalCoord = floor(finalCoord * factor2) / factor2;
	}

	result = snoise(finalCoord) * 0.5 + 0.5;
	return result > Threshold() + Threshold2(z);
}

void main(void) {
	vec3 color = vec3(0.0);
	vec3 solidColor = u_color;
	if(length(solidColor) < 1.0) { solidColor = vec3(0.8); }

	float len = length(v_vertex);
	float numSamples = pow(u_baseDetail, 1.5) + pow(len, 2.0) / 10.0;

	vec4 coord = vec4(v_vertex.x, v_vertex.y, 0.0, 1.0);

	if(u_pixelFactor > 1) {
		float p = pow(u_pixelFactor + 1, 1.5) + sin(float(u_time) / 10000.0 * 120.0) * 0.1;
		float factor = max(u_resolution.x, u_resolution.y) / p;
		coord.xy = floor(coord.xy * factor) / factor;
	}

	for(float sample = 0.0; sample < numSamples;) {
		float z = sample / numSamples;
		coord.z = InverseDepth(z);

		vec4 realCoordV4 = u_invViewProj * coord;
		vec3 realCoord = realCoordV4.xyz / realCoordV4.w;

		float result;
		if(Eval(realCoord, z, result)) {
			color = mix(solidColor, vec3(1.0, 0.9, 0.3), -Threshold2(z) / 0.02) - pow(z, 0.8);
			break;
		} else {
			float farFocus = pow(2.718281828, -u_farFocus);
			float farLimiter = pow(10, -u_farLimiter);
			sample += max(farLimiter, pow((Threshold() - result) * 20.0, farFocus));
		}
	}

	// crosshairs
	if(length(coord.xy) < 0.01 && (length(coord.x) < 0.002 || length(coord.y) < 0.002)) {
		float alpha = 0.25;
		color = alpha * vec3(1.0) + (1 - alpha) * color;
	}

	o_color = vec4(color, 1.0);
}
