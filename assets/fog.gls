@attrib vec2 a_vertex
@varying smooth vec2 v_vertex
@in color u_colorBuffer
@in depth u_depthBuffer
@out color o_color
@out depth

@shader vertex

void main() {
	gl_Position = vec4(a_vertex, 0.0, 1.0);
	v_vertex = (a_vertex + 1.0) / 2.0;
}

@shader fragment

#define FXAA_SPAN_MAX 8.0
#define FXAA_REDUCE_MUL (1.0/8.0)
#define FxaaInt2 ivec2
#define FxaaFloat2 vec2
#define FxaaTexLod0(t, p) texture2DLod(t, p, 0.0)
#define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)

vec3 Fxaa(
	vec4 posPos,   // Output of FxaaVertexShader interpolated across screen
	sampler2D tex, // Input texture
	vec2 rcpFrame) // Constant {1.0/frameWidth, 1.0/frameHeight}
{
/*---------------------------------------------------------*/
	#define FXAA_REDUCE_MIN   (1.0/128.0)
	//#define FXAA_REDUCE_MUL   (1.0/8.0)
	//#define FXAA_SPAN_MAX     8.0
/*---------------------------------------------------------*/
	vec3 rgbNW = FxaaTexLod0(tex, posPos.zw).xyz;
	vec3 rgbNE = FxaaTexOff(tex, posPos.zw, FxaaInt2(1,0), rcpFrame.xy).xyz;
	vec3 rgbSW = FxaaTexOff(tex, posPos.zw, FxaaInt2(0,1), rcpFrame.xy).xyz;
	vec3 rgbSE = FxaaTexOff(tex, posPos.zw, FxaaInt2(1,1), rcpFrame.xy).xyz;
	vec3 rgbM  = FxaaTexLod0(tex, posPos.xy).xyz;
/*---------------------------------------------------------*/
	vec3 luma = vec3(0.299, 0.587, 0.114);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot(rgbM,  luma);
/*---------------------------------------------------------*/
	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
/*---------------------------------------------------------*/
	vec2 dir; 
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
/*---------------------------------------------------------*/
	float dirReduce = max(
		(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
		FXAA_REDUCE_MIN);
	float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
	dir = min(FxaaFloat2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),
	      max(FxaaFloat2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
	      dir * rcpDirMin)) * rcpFrame.xy;
/*--------------------------------------------------------*/
	vec3 rgbA = (1.0/2.0) * (
		FxaaTexLod0(tex, posPos.xy + dir * (1.0/3.0 - 0.5)).xyz +
		FxaaTexLod0(tex, posPos.xy + dir * (2.0/3.0 - 0.5)).xyz);
	vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
		FxaaTexLod0(tex, posPos.xy + dir * (0.0/3.0 - 0.5)).xyz +
		FxaaTexLod0(tex, posPos.xy + dir * (3.0/3.0 - 0.5)).xyz);
	float lumaB = dot(rgbB, luma);
	if((lumaB < lumaMin) || (lumaB > lumaMax)) return rgbA;
	return rgbB;
}

vec4 Color(in vec2 texCoord) {
	return texture(u_colorBuffer, texCoord);
}

float Depth(in vec2 texCoord) {
	float depthRange = 1.0 / 64.0;
	float lowerDepth = 1.0 - depthRange;
	return clamp((texture(u_depthBuffer, texCoord).r - lowerDepth) / depthRange, 0.9, 1.0);
}

void main() {
	vec2 texCoord = v_vertex;
	vec4 color;

	vec2 rcpFrame = vec2(1.0 / 1280.0, 1.0 / 720.0);
	vec4 posPos;
	posPos.xy = texCoord;
	posPos.zw = texCoord - rcpFrame * (0.5 + 0.0);
	color.rgb = Fxaa(posPos, u_colorBuffer, rcpFrame);
	color.a = 1.0;

	float depth = Depth(texCoord);
	vec2 factor = vec2(1.0 / 1280.0, 1.0 / 720.0) * depth;

	float depthNorth = Depth(texCoord + vec2( 0,  1) * factor);
	float depthSouth = Depth(texCoord + vec2( 0, -1) * factor);
	float depthEast  = Depth(texCoord + vec2( 1,  0) * factor);
	float depthWest  = Depth(texCoord + vec2(-1,  0) * factor);
	float dv = (depthNorth + depthSouth) / 2.0;
	float dh = (depthEast + depthWest) / 2.0;

	vec4 colorNorth = mix(vec4(Fxaa(posPos + vec4( 0,  1, 0, 0) * factor.y, u_colorBuffer, rcpFrame), 1.0), color, abs(depth - dv));
	vec4 colorSouth = mix(vec4(Fxaa(posPos + vec4( 0, -1, 0, 0) * factor.y, u_colorBuffer, rcpFrame), 1.0), color, abs(depth - dv));
	vec4 colorEast  = mix(vec4(Fxaa(posPos + vec4( 1,  0, 0, 0) * factor.x, u_colorBuffer, rcpFrame), 1.0), color, abs(depth - dh));
	vec4 colorWest  = mix(vec4(Fxaa(posPos + vec4(-1,  0, 0, 0) * factor.x, u_colorBuffer, rcpFrame), 1.0), color, abs(depth - dh));

	color += (colorNorth + colorSouth + colorEast + colorWest) * (dv + dh) / 2.0;
	color /= 5.0;

	color = mix(color, vec4(0.0, 0.0, 0.0, 1.0), max(0, pow(depth, 50.0)));
	o_color = color;
}
