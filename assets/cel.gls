@attrib vec2 a_vertex
@varying smooth vec2 v_vertex
@in color u_colorBuffer
@gin depth u_depthBuffer
@out rgb8 color o_color

@shader vertex

void main() {
	gl_Position = vec4(a_vertex, 0.0, 1.0);
	v_vertex = (a_vertex + 1.0) / 2.0;
}

@shader fragment

vec3 Color(in vec2 texCoord) {
	return texture(u_colorBuffer, texCoord).rgb;
}

float Depth(in vec2 texCoord) {
	float depthRange = 1.0 / 64.0;
	float lowerDepth = 1.0 - depthRange;
	return (texture(u_depthBuffer, texCoord).r - lowerDepth) / depthRange;
}

void main() {
	vec2 texCoord = v_vertex;
	vec3 color = Color(texCoord);

	vec2 factor = 1.0 / vec2(textureSize(u_colorBuffer, 0));

	vec2 north = texCoord + vec2( 0,  factor.y);
	vec2 south = texCoord + vec2( 0, -factor.y);
	vec2 east  = texCoord + vec2( factor.x,  0);
	vec2 west  = texCoord + vec2(-factor.x,  0);

	const float MIN_DEPTH = 0;
	float depth      = max(MIN_DEPTH, Depth(texCoord));
	float depthNorth = max(MIN_DEPTH, Depth(north));
	float depthSouth = max(MIN_DEPTH, Depth(south));
	float depthEast  = max(MIN_DEPTH, Depth(east));
	float depthWest  = max(MIN_DEPTH, Depth(west));
	float depthNS = (depthNorth + depthSouth) / 2.0;
	float depthEW = (depthEast + depthWest) / 2.0;
	float diffV = abs(depth - depthNS);
	float diffH = abs(depth - depthEW);
	float diff = (diffV + diffH) / 2.0;

	if(diffV + diffH > 0.0001) {
		vec3 colorNorth = mix(Color(texCoord + vec2( 0,  1) * factor.y), color, diffV);
		vec3 colorSouth = mix(Color(texCoord + vec2( 0, -1) * factor.y), color, diffV);
		vec3 colorEast  = mix(Color(texCoord + vec2( 1,  0) * factor.x), color, diffH);
		vec3 colorWest  = mix(Color(texCoord + vec2(-1,  0) * factor.x), color, diffH);

		vec3 newColor = color;
		newColor += (colorNorth + colorSouth + colorEast + colorWest) * (depthNS + depthEW) / 2.0;
		newColor /= 5.0;

		const float NEAR = 0.6;
		const float FAR = 0.999999995;
		color = mix(color, newColor, clamp((depth - NEAR) / (FAR - NEAR), 0.0, 1.0));
	}

	o_color = color;
}