@uniform float u_blur
@attrib vec2 a_vertex
@varying smooth vec2 v_vertex
@in color u_colorBuffer
@gin depth u_depthBuffer
@gin position u_posBuffer
@out rgba8 color o_color

@shader vertex

void main() {
	gl_Position = vec4(a_vertex, 0.0, 1.0);
	v_vertex = a_vertex / 2.0 + 0.5;
}

@shader fragment

#define SIZE 8.0

float Random(in vec3 scale, in float seed) {
	return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
}

void main(void) {
	vec3 color = vec3(0.0);
	float total = 0.0;

	vec3 pos = texture(u_posBuffer, v_vertex).xyz;
	float offset1 = Random(vec3(12.9898, 78.233, 151.7182), 523.0);
	float offset2 = Random(vec3(12.9898, 78.233, 151.7182), 524.0);

	for(float t = -SIZE; t <= SIZE; ++t){
		float percent1 = u_blur * (t + offset1 - 0.5) / SIZE / 2.0;
		float percent2 = u_blur * (t + offset2 - 0.5) / SIZE / 2.0;

		float weight = 1.0 - (abs(percent1) + abs(percent2)) / 2.0;

		color += texture(u_colorBuffer, v_vertex + vec2(-percent1, -percent2)).rgb * weight;
		color += texture(u_colorBuffer, v_vertex + vec2( percent1, -percent2)).rgb * weight;
		color += texture(u_colorBuffer, v_vertex + vec2(      0.0, -percent2 + sqrt(5.0 * percent1 * percent1))).rgb * weight;

		total += weight * 3.0;
	}

	o_color.rgb = color / total;
	o_color.a = 1.0;
}
