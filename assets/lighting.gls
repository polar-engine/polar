@attrib vec2 a_vertex
@varying smooth vec2 v_vertex
@in color u_colorBuffer
@gin position u_posBuffer
@gin normal u_normalBuffer
@out rgb8 color o_color

@shader vertex

void main() {
	gl_Position = vec4(a_vertex, 0.0, 1.0);
	v_vertex = (a_vertex + 1.0) / 2.0;
}

@shader fragment

void main() {
	vec3 pos = texture(u_posBuffer, v_vertex).xyz;
	vec3 normal = texture(u_normalBuffer, v_vertex).xyz * 2.0 - 1.0;

	vec3 lightPos = vec3(0.0);
	float radius = 60.0;

	vec3 vAux = lightPos - pos;
	vec3 lightDir = normalize(vAux);
	float distance = length(vAux);

	float diffuseAttenuation = clamp(1.0 - distance * distance / (radius * radius), 0.0, 1.0);
	diffuseAttenuation *= diffuseAttenuation;

	float nDotL = max(0.0, dot(normal, lightDir));

	o_color = texture(u_colorBuffer, v_vertex).xyz * vec3(1.0, 0.5, 0.0) * nDotL * diffuseAttenuation;
}
