@uniform mat4 u_model
@uniform mat4 u_view
@uniform mat4 u_projection
@attrib vec3 a_vertex
@attrib vec3 a_normal
@varying smooth vec3 v_pos
@varying smooth vec3 v_vertex
@varying flat vec3 v_normal
@out rgba8 color o_color
@gout rgba8 normal o_normal
@gout depth depth

@shader vertex

void main() {
	vec4 modelVertex = u_model * vec4(a_vertex, 1.0);
	vec4 modelViewVertex = u_view * modelVertex;

	v_pos = vec3(modelVertex);
	v_vertex = vec3(modelViewVertex);
	v_normal = vec3(u_view * u_model * vec4(a_normal, 0.0));

	gl_Position = u_projection * modelViewVertex;
}

@shader fragment

float cnoise(vec3 P);

vec3 perlinNoise(vec3 color) {
	vec3 pos = v_pos;

	float eval1 = cnoise(pos * 3.51) * 0.5 + 0.5;
	float eval2 = cnoise(pos * 0.251) * 0.5 + 0.5;
	float eval3 = cnoise(pos * 0.031) * 0.5 + 0.5;
	float eval4 = cnoise(pos * 32.01) * 0.5 + 0.5;
	float eval5 = cnoise(pos * vec3(0.023, 0.007, 0.023)) * 0.5 + 0.5;

	/* toon shading */
	     if(eval1 < 0.125) { eval1 = 0.125; }
	else if(eval1 < 0.375) { eval1 = 0.375; }
	else if(eval1 < 0.625) { eval1 = 0.625; }
	else if(eval1 < 0.875) { eval1 = 0.875; }
	else                   { eval1 = 1.0; }

	const float E2 = 0.15;
	if(eval2 > 0.5 - E2 && eval2 < 0.5 + E2) { eval2 = smoothstep(0.5 - E2, 0.5 + E2, eval2); }
	else                                     { eval2 = step(0.5, eval2); };

	const float E3 = 0.35;
	if(eval3 > 0.5 - E3 && eval3 < 0.5 + E3) { eval3 = smoothstep(0.5 - E3, 0.5 + E3, eval3); }
	else                                     { eval3 = step(0.5, eval3); }

	const float range1 = 0.045;
	eval1 = eval1 * range1 + (1.0 - range1);

	const float range2 = 0.1;
	eval2 = eval2 * range2 + (1.0 - range2);

	if(eval4 > 0.9) { eval4 = 0.5; }
	else { eval4 = 1.0; }

	eval5 = smoothstep(0.12, 0.34, eval5);

	vec3 colorSlate = vec3(0.58, 0.57, 0.48);
	vec3 colorSlateGranite = vec3(0.685, 0.58, 0.46);
	vec3 colorGranite = vec3(0.79, 0.59, 0.44);
	vec3 colorOrange = vec3(1.0, 0.6, 0.02);

	return color.rgb * mix(colorSlate, mix(colorGranite, colorOrange, eval3), eval5) * eval1 * eval2;
}

vec3 light(in vec3 lightPosition, in vec3 color, in float shininess, in float radius) {
	vec3 ambient = vec3(0.0);

	vec3 vAux = lightPosition - v_vertex;
	vec3 lightDir = normalize(vAux);
	float distance = length(vAux);

	float diffuseAttenuation = clamp(1.0 - distance * distance / (radius * radius), 0.0, 1.0);
	diffuseAttenuation = pow(diffuseAttenuation, 1.0 / 3.0);

	float nDotL = max(0.0, dot(v_normal, lightDir));
	vec3 diffuse = color * /*nDotL * */diffuseAttenuation;

	vec3 specular = vec3(0.0, 0.0, 0.0);
	if(nDotL > 0.0) {
		vec3 halfway = normalize(lightDir + normalize(-v_vertex));
		float nDotH = max(0.0, dot(v_normal, halfway));
		float specularAttenuation = diffuseAttenuation;
		specular += sqrt(color) * pow(nDotH, shininess) * specularAttenuation;
	}
	vec3 final = ambient + diffuse;
	return final;
}

void main() {
	vec3 lighting = vec3(0.0);
	lighting += light(vec3(0.0), vec3(1.0), 256.0, 28.0);

	o_color = vec4(perlinNoise(lighting), 1.0);
	o_normal = vec4(v_normal / 2.0 + 0.5, 1.0);
}

vec3 mod289(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
	return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r) {
	return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
	return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float cnoise(vec3 P) {
	vec3 Pi0 = floor(P); // Integer part for indexing
	vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
	Pi0 = mod289(Pi0);
	Pi1 = mod289(Pi1);
	vec3 Pf0 = fract(P); // Fractional part for interpolation
	vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = Pi0.zzzz;
	vec4 iz1 = Pi1.zzzz;
	vec4 ixy = permute(permute(ix) + iy);
	vec4 ixy0 = permute(ixy + iz0);
	vec4 ixy1 = permute(ixy + iz1);
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	vec3 fade_xyz = fade(Pf0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
	return 2.2 * n_xyz;
}
