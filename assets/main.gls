@uniform mat4 u_model
@uniform mat4 u_view
@uniform mat4 u_projection
@attrib vec3 a_vertex
@attrib vec3 a_normal
@varying smooth vec3 v_pos
@varying smooth vec3 v_vertex
@varying flat vec3 v_normal
@out rgba8 color o_color
@gout rgba8 normal o_normal
@gout rgb32f position o_position
@gout depth depth

@shader vertex

void main() {
	vec4 modelVertex = u_model * vec4(a_vertex, 1.0);
	vec4 modelViewVertex = u_view * modelVertex;

	v_pos = vec3(modelVertex);
	v_vertex = vec3(modelViewVertex);
	v_normal = vec3(u_view * u_model * vec4(a_normal, 0.0));

	gl_Position = u_projection * modelViewVertex;
}

@shader fragment

vec3 light(in vec3 lightPosition, in vec3 color, in float shininess, in float radius) {
	vec3 ambient = vec3(0.01);

	vec3 vAux = lightPosition - v_vertex;
	vec3 lightDir = normalize(vAux);
	float distance = length(vAux);

	float diffuseAttenuation = clamp(1.0 - distance * distance / (radius * radius), 0.0, 1.0);
	diffuseAttenuation *= diffuseAttenuation;

	float nDotL = max(0.0, dot(v_normal, lightDir));
	vec3 diffuse = color * nDotL * diffuseAttenuation;

	vec3 specular = vec3(0.0, 0.0, 0.0);
	if(nDotL > 0.0) {
		vec3 halfway = normalize(lightDir + normalize(-v_vertex));
		float nDotH = max(0.0, dot(v_normal, halfway));
		float specularAttenuation = diffuseAttenuation;
		specular += sqrt(color) * pow(nDotH, shininess) * specularAttenuation;
	}
	vec3 final = ambient + diffuse + specular;
	return final;
}

void main() {
	vec3 lighting = vec3(0.0);
	lighting += light(vec3(0.0), vec3(1.0, 0.6, 0.02), 256.0, 60.0);

	o_color.rgb = lighting;
	o_color.a = 1.0;
	o_normal.xyz = v_normal / 2.0 + 0.5;
	o_normal.w = 1.0;
	o_position = v_pos;
}
