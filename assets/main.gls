#version 150
precision highp float;

uniform mat4 u_modelView;

@vertex

#extension GL_ARB_explicit_attrib_location: enable

uniform mat4 u_projection;
layout(location = 0) in vec4 a_vertex;
layout(location = 1) in vec4 a_normal;
smooth out vec4 v_vertex;
flat out vec4 v_normal;

void main() {
	vec4 modelViewVertex = u_modelView * a_vertex;
	v_vertex = modelViewVertex;
	v_normal = u_modelView * a_normal;
	gl_Position = u_projection * modelViewVertex;
}

@fragment

smooth in vec4 v_vertex;
flat in vec4 v_normal;
out vec4 o_color;

vec3 light(in vec4 lightPosition, in vec3 color, in float shininess, in float radius, in float fogDistance, in float fogIntensity) {
	vec3 ambient = vec3(0.01);

	vec4 vAux = lightPosition - v_vertex;
	vec4 lightDir = normalize(vAux);
	float distance = length(vAux);
	
	float sr = sqrt(radius);
	float fogStart = sr * 1.0;
	float fogPeak = max(fogStart + sr, fogDistance);
	vec3 fog = vec3(0.0);
	if(distance > fogStart) {
		fog += sqrt(color) * 0.1 * (1.0 - 
			clamp((fogPeak * fogPeak - distance * distance) / (fogPeak * fogPeak - fogStart * fogStart), -fogIntensity, fogIntensity));
	}

	float diffuseAttenuation = clamp(1.0 - distance * distance / (radius * radius), 0.0, 1.0);
	diffuseAttenuation *= diffuseAttenuation;
	if(diffuseAttenuation < 0.15) {
		//diffuseAttenuation = sqrt(diffuseAttenuation) * 0.15 * 0.15;
		//diffuseAttenuation *= diffuseAttenuation;
	}

	float nDotL = max(0.0, dot(v_normal, lightDir));
	vec3 diffuse = color * nDotL * diffuseAttenuation;

	vec3 specular = vec3(0.0, 0.0, 0.0);
	if(nDotL > 0.0) {
		vec4 halfway = normalize(lightDir + normalize(-v_vertex));
		float nDotH = max(0.0, dot(v_normal, halfway));
		float specularAttenuation = diffuseAttenuation;
		if(specularAttenuation < 0.1) { specularAttenuation = 0.0; }
		specular += sqrt(color) * pow(nDotH, shininess) * specularAttenuation;
	}
	vec3 final = (ambient + diffuse + specular + fog) / 2.0;
	return final;
}

void main() {
	vec3 final = vec3(0.0);
	final += light(vec4(0.0), vec3(1.0, 0.5, 0.0) * 4.0, 64.0, 24.0, 40.0, 1.0);
	//final += light(vec4(25.0, 3.0, -40.0, 1.0), vec3(1.0, 0.7, 0.74), 256.0, 40.0, 100.0, 1.0);

	vec3 hdr = 1.0 - exp2(-final * 1.5);
	hdr *= max(1.0, length(final) / 2);
	o_color = vec4(hdr, 1.0);
}
